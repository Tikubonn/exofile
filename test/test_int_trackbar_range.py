
from exofile import IntTrackBarRange, TrackBarType
from unittest import TestCase 

class TestIntTrackBarRange (TestCase):

  def test_serialize (self):

    #without parameter

    trackrange = IntTrackBarRange(-100, 100, TrackBarType.LINEAR, accelerate=False, decelerate=False)
    self.assertEqual(trackrange.serialize(), "-100,100,1")
    trackrange = IntTrackBarRange(-100, 100, TrackBarType.LINEAR, accelerate=True, decelerate=False)
    self.assertEqual(trackrange.serialize(), "-100,100,65")
    trackrange = IntTrackBarRange(-100, 100, TrackBarType.LINEAR, accelerate=False, decelerate=True)
    self.assertEqual(trackrange.serialize(), "-100,100,33")
    trackrange = IntTrackBarRange(-100, 100, TrackBarType.LINEAR, accelerate=True, decelerate=True)
    self.assertEqual(trackrange.serialize(), "-100,100,97")

    #with parameter

    trackrange = IntTrackBarRange(-100, 100, TrackBarType.LINEAR, accelerate=False, decelerate=False, parameter=100)
    self.assertEqual(trackrange.serialize(), "-100,100,1,100")
    trackrange = IntTrackBarRange(-100, 100, TrackBarType.LINEAR, accelerate=True, decelerate=False, parameter=100)
    self.assertEqual(trackrange.serialize(), "-100,100,65,100")
    trackrange = IntTrackBarRange(-100, 100, TrackBarType.LINEAR, accelerate=False, decelerate=True, parameter=100)
    self.assertEqual(trackrange.serialize(), "-100,100,33,100")
    trackrange = IntTrackBarRange(-100, 100, TrackBarType.LINEAR, accelerate=True, decelerate=True, parameter=100)
    self.assertEqual(trackrange.serialize(), "-100,100,97,100")

    #named id without parameter

    trackrange = IntTrackBarRange(-100, 100, "回転", accelerate=False, decelerate=False)
    self.assertEqual(trackrange.serialize(), "-100,100,15@回転")
    trackrange = IntTrackBarRange(-100, 100, "回転", accelerate=True, decelerate=False)
    self.assertEqual(trackrange.serialize(), "-100,100,79@回転")
    trackrange = IntTrackBarRange(-100, 100, "回転", accelerate=False, decelerate=True)
    self.assertEqual(trackrange.serialize(), "-100,100,47@回転")
    trackrange = IntTrackBarRange(-100, 100, "回転", accelerate=True, decelerate=True)
    self.assertEqual(trackrange.serialize(), "-100,100,111@回転")

    #named id with parameter

    trackrange = IntTrackBarRange(-100, 100, "回転", accelerate=False, decelerate=False, parameter=100)
    self.assertEqual(trackrange.serialize(), "-100,100,15@回転,100")
    trackrange = IntTrackBarRange(-100, 100, "回転", accelerate=True, decelerate=False, parameter=100)
    self.assertEqual(trackrange.serialize(), "-100,100,79@回転,100")
    trackrange = IntTrackBarRange(-100, 100, "回転", accelerate=False, decelerate=True, parameter=100)
    self.assertEqual(trackrange.serialize(), "-100,100,47@回転,100")
    trackrange = IntTrackBarRange(-100, 100, "回転", accelerate=True, decelerate=True, parameter=100)
    self.assertEqual(trackrange.serialize(), "-100,100,111@回転,100")

    #single value without parameter (keyword args will be ignored)

    trackrange = IntTrackBarRange(100)
    self.assertEqual(trackrange.serialize(), "100")
    trackrange = IntTrackBarRange(100, accelerate=False, decelerate=False)
    self.assertEqual(trackrange.serialize(), "100")
    trackrange = IntTrackBarRange(100, accelerate=True, decelerate=False)
    self.assertEqual(trackrange.serialize(), "100")
    trackrange = IntTrackBarRange(100, accelerate=False, decelerate=True)
    self.assertEqual(trackrange.serialize(), "100")
    trackrange = IntTrackBarRange(100, accelerate=True, decelerate=True)
    self.assertEqual(trackrange.serialize(), "100")

    #single value with parameter (parameter and keyword args will be ignored)

    trackrange = IntTrackBarRange(100, parameter=100)
    self.assertEqual(trackrange.serialize(), "100")
    trackrange = IntTrackBarRange(100, accelerate=False, decelerate=False, parameter=100)
    self.assertEqual(trackrange.serialize(), "100")
    trackrange = IntTrackBarRange(100, accelerate=True, decelerate=False, parameter=100)
    self.assertEqual(trackrange.serialize(), "100")
    trackrange = IntTrackBarRange(100, accelerate=False, decelerate=True, parameter=100)
    self.assertEqual(trackrange.serialize(), "100")
    trackrange = IntTrackBarRange(100, accelerate=True, decelerate=True, parameter=100)
    self.assertEqual(trackrange.serialize(), "100")

  def test_copy (self):

    #with parameter

    trackrange = IntTrackBarRange(-100, 100, TrackBarType.LINEAR, accelerate=True, decelerate=True, parameter=100)
    trackrangecopy = IntTrackBarRange(trackrange)
    self.assertEqual(trackrangecopy.start, -100)
    self.assertEqual(trackrangecopy.end, 100)
    self.assertEqual(trackrangecopy.trackbartype, TrackBarType.LINEAR)
    self.assertEqual(trackrangecopy.accelerate, True)
    self.assertEqual(trackrangecopy.decelerate, True)
    self.assertEqual(trackrangecopy.parameter, 100)
    self.assertEqual(trackrangecopy.serialize(), "-100,100,97,100")

    #single value 

    trackrange = IntTrackBarRange(100)
    trackrangecopy = IntTrackBarRange(trackrange)
    self.assertEqual(trackrangecopy.start, 100)
    self.assertEqual(trackrangecopy.end, 100)
    self.assertEqual(trackrangecopy.trackbartype, TrackBarType.NONE)
    self.assertEqual(trackrangecopy.accelerate, False)
    self.assertEqual(trackrangecopy.decelerate, False)
    self.assertEqual(trackrangecopy.parameter, None)
    self.assertEqual(trackrangecopy.serialize(), "100")

  def test_deserialize (self):

    #without parameter

    trackrange = IntTrackBarRange.deserialize("-100,100,1")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, TrackBarType.LINEAR)
    self.assertEqual(trackrange.accelerate, False)
    self.assertEqual(trackrange.decelerate, False)
    self.assertEqual(trackrange.parameter, None)
    self.assertEqual(trackrange.serialize(), "-100,100,1")
    trackrange = IntTrackBarRange.deserialize("-100,100,65")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, TrackBarType.LINEAR)
    self.assertEqual(trackrange.accelerate, True)
    self.assertEqual(trackrange.decelerate, False)
    self.assertEqual(trackrange.parameter, None)
    self.assertEqual(trackrange.serialize(), "-100,100,65")
    trackrange = IntTrackBarRange.deserialize("-100,100,33")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, TrackBarType.LINEAR)
    self.assertEqual(trackrange.accelerate, False)
    self.assertEqual(trackrange.decelerate, True)
    self.assertEqual(trackrange.parameter, None)
    self.assertEqual(trackrange.serialize(), "-100,100,33")
    trackrange = IntTrackBarRange.deserialize("-100,100,97")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, TrackBarType.LINEAR)
    self.assertEqual(trackrange.accelerate, True)
    self.assertEqual(trackrange.decelerate, True)
    self.assertEqual(trackrange.parameter, None)
    self.assertEqual(trackrange.serialize(), "-100,100,97")

    #with parameter

    trackrange = IntTrackBarRange.deserialize("-100,100,1,100")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, TrackBarType.LINEAR)
    self.assertEqual(trackrange.accelerate, False)
    self.assertEqual(trackrange.decelerate, False)
    self.assertEqual(trackrange.parameter, 100)
    self.assertEqual(trackrange.serialize(), "-100,100,1,100")
    trackrange = IntTrackBarRange.deserialize("-100,100,65,100")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, TrackBarType.LINEAR)
    self.assertEqual(trackrange.accelerate, True)
    self.assertEqual(trackrange.decelerate, False)
    self.assertEqual(trackrange.parameter, 100)
    self.assertEqual(trackrange.serialize(), "-100,100,65,100")
    trackrange = IntTrackBarRange.deserialize("-100,100,33,100")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, TrackBarType.LINEAR)
    self.assertEqual(trackrange.accelerate, False)
    self.assertEqual(trackrange.decelerate, True)
    self.assertEqual(trackrange.parameter, 100)
    self.assertEqual(trackrange.serialize(), "-100,100,33,100")
    trackrange = IntTrackBarRange.deserialize("-100,100,97,100")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, TrackBarType.LINEAR)
    self.assertEqual(trackrange.accelerate, True)
    self.assertEqual(trackrange.decelerate, True)
    self.assertEqual(trackrange.parameter, 100)
    self.assertEqual(trackrange.serialize(), "-100,100,97,100")

    #named id without parameter

    trackrange = IntTrackBarRange.deserialize("-100,100,15@回転")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, "回転")
    self.assertEqual(trackrange.accelerate, False)
    self.assertEqual(trackrange.decelerate, False)
    self.assertEqual(trackrange.parameter, None)
    self.assertEqual(trackrange.serialize(), "-100,100,15@回転")
    trackrange = IntTrackBarRange.deserialize("-100,100,79@回転")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, "回転")
    self.assertEqual(trackrange.accelerate, True)
    self.assertEqual(trackrange.decelerate, False)
    self.assertEqual(trackrange.parameter, None)
    self.assertEqual(trackrange.serialize(), "-100,100,79@回転")
    trackrange = IntTrackBarRange.deserialize("-100,100,47@回転")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, "回転")
    self.assertEqual(trackrange.accelerate, False)
    self.assertEqual(trackrange.decelerate, True)
    self.assertEqual(trackrange.parameter, None)
    self.assertEqual(trackrange.serialize(), "-100,100,47@回転")
    trackrange = IntTrackBarRange.deserialize("-100,100,111@回転")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, "回転")
    self.assertEqual(trackrange.accelerate, True)
    self.assertEqual(trackrange.decelerate, True)
    self.assertEqual(trackrange.parameter, None)
    self.assertEqual(trackrange.serialize(), "-100,100,111@回転")

    #named id with parameter

    trackrange = IntTrackBarRange.deserialize("-100,100,15@回転,100")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, "回転")
    self.assertEqual(trackrange.accelerate, False)
    self.assertEqual(trackrange.decelerate, False)
    self.assertEqual(trackrange.parameter, 100)
    self.assertEqual(trackrange.serialize(), "-100,100,15@回転,100")
    trackrange = IntTrackBarRange.deserialize("-100,100,79@回転,100")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, "回転")
    self.assertEqual(trackrange.accelerate, True)
    self.assertEqual(trackrange.decelerate, False)
    self.assertEqual(trackrange.parameter, 100)
    self.assertEqual(trackrange.serialize(), "-100,100,79@回転,100")
    trackrange = IntTrackBarRange.deserialize("-100,100,47@回転,100")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, "回転")
    self.assertEqual(trackrange.accelerate, False)
    self.assertEqual(trackrange.decelerate, True)
    self.assertEqual(trackrange.parameter, 100)
    self.assertEqual(trackrange.serialize(), "-100,100,47@回転,100")
    trackrange = IntTrackBarRange.deserialize("-100,100,111@回転,100")
    self.assertEqual(trackrange.start, -100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, "回転")
    self.assertEqual(trackrange.accelerate, True)
    self.assertEqual(trackrange.decelerate, True)
    self.assertEqual(trackrange.parameter, 100)
    self.assertEqual(trackrange.serialize(), "-100,100,111@回転,100")

    #single value without parameter

    trackrange = IntTrackBarRange.deserialize("100")
    self.assertEqual(trackrange.start, 100)
    self.assertEqual(trackrange.end, 100)
    self.assertEqual(trackrange.trackbartype, TrackBarType.NONE)
    self.assertEqual(trackrange.accelerate, False)
    self.assertEqual(trackrange.decelerate, False)
    self.assertEqual(trackrange.parameter, None)
    self.assertEqual(trackrange.serialize(), "100")
